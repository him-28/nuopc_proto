 #!/usr/bin/expect --   
set rfile  [lindex $argv 0]
set results_file  [lindex $argv 1]
set homedir  [lindex $argv 2]
set bash_pid [spawn /bin/bash -l ]

set prompt "(%|>|#|\\$) $"          ;# default prompt

catch {set prompt $env(EXPECT_PROMPT)}

expect -re $prompt

send "export homedir=$homedir \r"

expect -re $prompt

send "cd $homedir \r"

expect -re $prompt

send "chk_out_scripts \r"

expect -re $prompt

send "cd /glade/scratch/himanshu/scripts_dir/daily/nuopc_cheyenne/intel \r"

expect -re $prompt

send "rm -rf esmf nuopc-app-prototypes \r"

expect -re $prompt

set timeout 900
send "git clone https://github.com/esmf-org/esmf.git \r"

expect eof

expect -re $prompt

set timeout 900
send " git clone git@github.com:esmf-org/nuopc-app-prototypes.git \r"
#send " svn checkout https://svn.code.sf.net/p/esmfcontrib/svn/NUOPC/tags/ESMF_8_0_0  NUOPC-Protos \r"

expect eof

expect -re $prompt

spawn qsub -I -l select=1:ncpus=36:mpiprocs=36 -l walltime=5:30:00 -q regular -A P93300606
set timeout 18000

expect {
        timeout
                {
                        puts "detected queue timeout"
                        set file [ open $results_file w]
                        puts $file "error"
                        send "kill -9 $bash_pid\r"
                }
        "ready"
                {
                        send "cd $homedir \r"

                        expect -re $prompt
                }

        }


send "cd $homedir \r"

expect -re $prompt

 
set timeout 14400
send "./local_test_script.noq  $rfile  \r"

expect {
                "end of test script"
                {
                        puts "detected end of test script"
                        set file [ open $results_file w]
                        puts $file "normal"
                        send "kill -9 $bash_pid\r"
                }
                timeout
                {
                        puts "detected timeout"
                        set file [ open $results_file w]
                        puts $file "error"
                        send "kill -9 $bash_pid\r"
                }
        }

