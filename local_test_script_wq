#!/bin/bash
rfile=$1



############################### Read the file for log directory and email recipient #######

datestamp=`date +%y%m`
logfile="${datestamp}_test"
echo " The logfile is $logfile"
here=`pwd`


if grep -i "LOG_DIR1" $rfile > tmp
then
        read location log_dir log_tmp < tmp
        cd $log_dir
        if test ! -d  $logfile
        then
                # Make new directory if doesn't exist
                mkdir $logfile
        fi
        cd $here
        echo "LOGDIR1 is $log_dir/$logfile"
        export LOGDIR=$log_dir/$logfile
fi

if grep -i "LOGDIR2" $rfile > tmp
then
        read location log_dir2 < tmp
        cd $log_dir2
        if test ! -d  $logfile
        then
                mkdir $logfile
        fi
        cd $here

        echo "LOGDIR2 is $log_dir2/$logfile"
        export LOGDIR2=$log_dir2/$logfile
fi



if grep -i "email_to" $rfile > tmp
then
	read location emailuser < tmp
	echo "Email user is $emailuser"
fi

if grep -i "email_title" $rfile > tmp
then
	read location email_title < tmp
	echo "Email title is $email_title"
fi


rm -f tmp

rm -f $LOGDIR/mailMessage
rm -f $LOGDIR/newMailMessage
rm -f $LOGDIR/header
rm -f $LOGDIR/mailHeader
rm -f $LOGDIR/newsummary
rm -f $LOGDIR/sum
rm -f $LOGDIR/summary

# Set test status as green, assume it will run clean
echo "Test_results:green" > $LOGDIR/Test_Status
echo "Set Test Status to green."


export TZ="/usr/share/zoneinfo/US/Mountain"
echo "Day_of_Week:`date +%A`" > $LOGDIR/Day_Started

#Set Number of test failure
echo "0" > $LOGDIR/Test_Failures



echo "" >> $LOGDIR/header
echo "Script start time: `date`" >> $LOGDIR/header

cd $homedir

############################### Extract script to checkout ESMF ###########################
cat  > $homedir/exp_co << \THE-END-OF-EXP-CO
#!/usr/bin/expect --

set sfuser [lindex $argv 0]
set tag [lindex $argv 1]
send_user " tag is $tag"

set timeout 3600

if { $tag == "" } {
	# spawn  cvs -z3  co -P esmf
        spawn  cvs -z3 -d:ext:$sfuser@esmf.cvs.sourceforge.net:/cvsroot/esmf co -P esmf
        #spawn  cvs -d svasquez@login.sourceforge.net:/home/groups/e/es/esmf/backupCVS co -d esmf -P esmf

} else {

        spawn cvs -z3 -d:ext:$sfuser@esmf.cvs.sourceforge.net:/cvsroot/esmf co -P -r $tag esmf
}


expect {
        "password: "
                        {

                                send "$sfpword\r"

                        }
        "(yes/no)?"
                        {

                                send "yes\r"

                                exp_continue


                        }
        "(yes/no)? "
                        {

                                send "yes\r"

                                exp_continue

                        }
        "Connection closed by remote host"
                        {
                                exit
                        }
	eof
			{
				exit
			}


        }



expect eof


THE-END-OF-EXP-CO


############################### Extract script to checkout ESMF ###########################
cat  > exp_git << \THE-END-OF-EXP-GIT
#!/usr/bin/expect --

set source [lindex $argv 0]
send_user " source is $source "

        set timeout 3600
        spawn git clone --depth 100 $source


expect  eof


THE-END-OF-EXP-GIT

cat  > svn_nuopc << \THE-END-OF-SVN_NUOPC
#!/usr/bin/expect --

set tag [lindex $argv 0]
send_user " tag is $tag"

set timeout 900

if { $tag == "" } {

	spawn svn checkout svn://svn.code.sf.net/p/esmfcontrib/svn/NUOPC/trunk NUOPC-Protos

} else {

	spawn svn checkout https://svn.code.sf.net/p/esmfcontrib/svn/NUOPC/tags/$tag NUOPC-Protos
	 #spawn svn checkout https://svn.code.sf.net/p/esmfcontrib/svn/NUOPC/branches/$tag NUOPC-Protos

}

expect  eof


THE-END-OF-SVN_NUOPC


cat  > git_tag << \THE-END-OF-GIT_TAG
#!/usr/bin/expect --

set tag [lindex $argv 0]
send_user " tag is $tag"

set timeout 900

spawn git checkout tags/$tag

expect  eof


THE-END-OF-GIT_TAG




############################### Extract script to checkout ESMF ###########################
cat  > $homedir/exp_co_euc << \THE-END-OF-EXP-CO-EUC
#!/usr/bin/expect --

set sfuser [lindex $argv 0]
set tag [lindex $argv 1]
send_user " tag is $tag"

set timeout 3600

if { $tag == "" } {

	 #spawn  cvs -z3  co -P external_demos
        spawn  cvs -z3 -d:ext:$sfuser@esmf.cvs.sourceforge.net:/cvsroot/esmf co -P external_demos
        #spawn  cvs -d svasquez@login.sourceforge.net:/home/groups/e/es/esmf/backupCVS co -d esmf -P esmf

} else {

        spawn cvs -z3 -d:ext:$sfuser@esmf.cvs.sourceforge.net:/cvsroot/esmf co -P -r $tag external_demos
}


expect {
        "password: "
                        {

                                send "$sfpword\r"

                        }
        "(yes/no)?"
                        {

                                send "yes\r"

                                exp_continue


                        }
        "(yes/no)? "
                        {

                                send "yes\r"

                                exp_continue

                        }
        "Connection closed by remote host"
                        {
                                exit
                        }
	       eof
                        {
                                exit
                        }



        }



expect eof
THE-END-OF-EXP-CO-EUC



############################### Parse the compute file and checkout esmf where indicated ##

number=1
while grep "^$number " $rfile >tmp
do
        read num location directory hostname abi site comp comm u_tests u_tests_type sys_test_type threaded procs ck_out_opt tag < tmp
        echo "$location $directory $hostname $abi $site $comp $comm $u_tests $u_tests_type $sys_test_type $threaded $procs $ck_out_opt $ta
g"
        if [[ $ck_out_opt = "co" ]]
        then
                umask 002
                export CVS_RSH=ssh
		# Get ESMF checkout source

		read chkout_src <  ~/bin/esmf_chkout_src
		#if read fails default:git://git.code.sf.net/p/esmf/esmf
		if [ "$?" != "0" ]
		then
        		export chkout_src="git://git.code.sf.net/p/esmf/esmf"
		fi
		echo "" >> $LOGDIR/mailMessage
		echo "ESMF Checkout Source: $chkout_src" >> $LOGDIR/mailMessage
		echo "" >> $LOGDIR/mailMessage


                export homedir=`pwd`
                cd $directory
                pwd
                rm -rf esmf
                rm -rf NUOPC-Protos
                export sfuser=svasquez
                # Execute the script to checkout the esmf
                #expect $homedir/exp_co $sfuser  $tag
                expect $homedir/exp_git $chkout_src
                # Check if checkout was successful
                # If the esmf directory does not exists 
                if test ! -d esmf
                then
                        echo "Sleeping"
                        sleep 900
                        expect $homedir/exp_git $chkout_src
                        #expect $homedir/exp_co $sfuser  $tag
                else
                        # Check for tag
                        if [[ $tag != "" ]]
                        then
                                cd esmf
                                expect $homedir/git_tag $tag
                                cd ..
                        fi
                        # Check out the nuopc demos
                        #expect $homedir/exp_co_utc $sfuser  $tag
			rm -rf NUOPC-Protos
                        expect $homedir/svn_nuopc $tag
			sleep 300
                        if test ! -d NUOPC-Protos
                        then
                                cd $homedir
                                echo "Unable to checkout the nuopc demos from SourceForge." > mailMessage
                                echo "No tests were run" >> mailMessage
                                #mail -s  $email_title $emailuser <  mailMessage
                                # Set test status as blue, checkout failed.
                                echo "Test_results:blue" > $LOGDIR/Test_Status
                                cat $LOGDIR/Test_Status >> $LOGDIR/MailMessage
                                mail -s ESMF_NUOPC_Cheyenne_intel silverio.vasquez@noaa.gov <  $LOGDIR/MailMessage
                                mail -s ESMF_NUOPC_Cheyenne esmf_test@noaa.gov < $LOGDIR/MailMessage
                                rm -rf mailMessage
                                echo "Checkout failed"
                                echo "end of test script"
                        fi

                fi
                cd $homedir
        fi
        number=`expr $number + 1`
        echo "number = $number"
done

rm -f exp_co

 ############################## Extract script to checkout ESMF Contrib Site ###########################
 cat  > $homedir/exp_co << \THE-END-OF-EXP-CO
 #!/usr/bin/expect --

 set sfuser [lindex $argv 0]
 set sfpword [lindex $argv 1]
 set module [lindex $argv 2]
 
 set timeout 900

if { $module == "blackforest" || $module == "babyblue"|| $module == "bluesky"|| $module == "chinook" || $module == "longs" || $module == "mika" } { 
		set module "ncar"
	}
 
 spawn  cvs -z3 -d:ext:$sfuser@esmfcontrib.cvs.sourceforge.net:/cvsroot/esmfcontrib co $module
 
 expect {
       "password: "
                       {
 
                                 send "$sfpword\r"
 
                         }
         "(yes/no)?"
                         {
 
                                 send "yes\r"
 
                                 exp_continue
 
 
                         }
         "(yes/no)? "
                         {
 
                                 send "yes\r"
 
                                 exp_continue
 
                         }
 
         }
 
 
 
 expect eof
 
THE-END-OF-EXP-CO
 
 ############################### Parse the compute file and checkout esmf contrib  module where indicated ##
 
 number=1
 while grep "^$number " $rfile >tmp
 do
        read num location directory hostname abi site comp comm u_tests u_tests_type sys_test_type threaded mpmd ck_out_opt tag < tmp
        echo "$location $directory $hostname $abi $site $comp $comm $u_tests $u_tests_type $sys_test_type $threaded $mpmd $ck_out_opt $tag"
       if [[ $site != "default" ]]
       then
                umask 002
                export CVS_RSH=ssh
                cd $directory/esmf/build_config
		dir_size=`ls | wc -l`
		echo "dir_size = $dir_size"
                # Execute the script to checkout the esmfconfig
                expect $homedir/exp_co $sfuser $sfpword $site
               # Check if checkout was successful
                new_dir_size=`ls | wc -l`
		echo "new_dir_size = $new_dir_size"
		if [ $new_dir_size =  $dir_size ]
                then
			echo "Sleeping 10"
                        sleep 10
                        expect $homedir/exp_co $sfuser $sfpword $site
                        # Check if checkout was successful
                	new_dir_size=`ls | wc -l`
		else
			# Done if successfull
			break 
		fi
		if [ $new_dir_size =  $dir_size ]
                then
			echo "Sleeping 900"
                        sleep 900
                        expect $homedir/exp_co $sfuser $sfpword $site
                        # Check if checkout was successful
                	new_dir_size=`ls | wc -l`
		else
			# Done if successfull
			break 
		fi
		if [ $new_dir_size =  $dir_size ]
                then
			echo "Sleeping 1800"
                	sleep 1800
                        expect $homedir/exp_co $sfuser $sfpword $site
                        # Check if checkout was successful
                	new_dir_size=`ls | wc -l`
		else
			# Done if successfull
			break 
		fi
		if [ $new_dir_size =  $dir_size ]
                then
			echo "Sleeping 3600"
                	sleep 3600
                        expect $homedir/exp_co $sfuser $sfpword $site
                        # Check if checkout was successful
                	new_dir_size=`ls | wc -l`
		else
			# Done if successfull
			break 
		fi
		if [ $new_dir_size =  $dir_size ]
                then
                      	cd $homedir
                        echo "Unable to checkout ESMFCONTRIB from SourceForge." > mailMessage
                        echo "No tests were run" >> mailMessage
                        mail -s  $email_title $emailuser <  mailMessage
                        mail -s  $email_title esmf_test@ucar.edu <  mailMessage
                        rm -rf mailMessage
			# Can't go any further
			rm -f $homedir/.outFile
                        exit
		else
			# Done if successfull
			break 
		fi
       fi
       number=`expr $number + 1`
       echo "number = $number"
 done
 
rm -f $homedir/.outFile
cd $homedir



 

 

#### Extract script to run nuopc test
cat  > exec_test << \THE-END-OF-EXEC_TEST
#!/usr/bin/expect --
 
set PROCS [lindex $argv 0]
set TEST [lindex $argv 1]
set TEST_DIR [lindex $argv 2]
set MPIRUN [lindex $argv 3]
set bash_pid [spawn /bin/bash]


set prompt "(%|>|#|\\$) $"          ;# default prompt

catch {set prompt $env(EXPECT_PROMPT)}

expect -re $prompt

send "export PROCS=$PROCS \r"

expect -re $prompt

send "export TEST=$TEST \r"

expect -re $prompt

send "export TEST_DIR=$TEST_DIR \r"

expect -re $prompt

send "export MPIRUN=$MPIRUN \r"

expect -re $prompt

spawn  qsub -I -l select=1:ncpus=2:mpiprocs=4 -l walltime=30:00 -q regular -A P93300606
#spawn  bsub  -Ip -q small -W 00:15 -n 8 -P UCUB0024 /bin/bash
#spawn  bsub  -Ip -q small -W 30 -n 8 -P P35071386 /bin/bash 
#spawn  bsub  -Ip -q small -W 30 -n 8 -P SCSG0002 /bin/bash 
set timeout 3600

expect {
        "ready"
                        {

                                send "\r"
    
                        }
    
        }


set prompt "(%|>|#|\\$) $"          ;# default prompt

catch {set prompt $env(EXPECT_PROMPT)}

expect -re $prompt

send "cd $TEST_DIR \r"

expect -re $prompt

send "echo `pwd` \r"

expect -re $prompt

send " echo ' $MPIRUN -np $PROCS ./$TEST' \r"

expect -re $prompt


set timeout 600
send " $MPIRUN -np $PROCS ./$TEST   > tmp  \r"
 
expect {
	-re $prompt
                        {
        
                                send "\r"
                        }

        "completed"
                        {

                                send "\r"

                        }
        }

expect -re $prompt

send "sleep 10 \r"

expect -re $prompt


THE-END-OF-EXEC_TEST

chmod 777 exec_test



############################### Extract test_esmf ########################################

cat > $homedir/test_esmf << \BUILD-ESMF
#!/bin/bash -l
#PBS -eo -q reg -l nodes=1:ppn=1

cd $ESMF_DIR

env

#Clobber previous arch files
#gmake clobber 1> tmp 2>&1


echo "" >> $LOGDIR/mailMessage
echo "________________________________________________________________________________________" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage

test_results=0  #assume build passes
install_results=0  #assume install passes
tests=0
test_failures=0
ex_passed=0
ex_failed=0

echo "`date` on `uname -n` " >> $LOGDIR/mailMessage
# Get ESMF checkout source

read chkout_src <  ~/bin/esmf_chkout_src
#if read fails default:git://git.code.sf.net/p/esmf/esmf
if [ "$?" != "0" ]
then
        export chkout_src="git://git.code.sf.net/p/esmf/esmf"
fi
echo "" >> $LOGDIR/mailMessage
echo "ESMF Checkout Source: $chkout_src" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage

echo "Compiler and configuration information:" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage
echo "-------------------------------------------------------------- " >> $LOGDIR/mailMessage

module list  1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage
git remote -v 1> tmp 2>&1

if (grep -i "Not a git repository" tmp)
then
        #Checkout failed
        echo "Test_results:blue" > $LOGDIR/Test_Status
fi


echo "ESMF Repository:" >> $LOGDIR/mailMessage
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
git describe --tags 1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage

cd ../NUOPC-Protos
svn info 1> tmp 2>&1
echo "NUOPC Repository:" >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
cat tmp >> $LOGDIR/mailMessage
cd $ESMF_DIR

echo " " >> $LOGDIR/mailMessage
gmake ESMF_BOPT=$OPT info 1> tmp 2>&1
echo " " >> $LOGDIR/mailMessage
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage



gmake ESMF_BOPT=$OPT  1> tmp 2>&1
if [ "$?" != "0" ]
then
        echo "Library build FAIL with ESMF_BOPT=$OPT"

	if [ $OPT != g ]
	then 
		cat tmp > $LOGDIR/build_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
	else
		cat tmp > $LOGDIR/build_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
	fi #end of if [ $OPT != g ]

	echo "`date` library build *****************************FAIL" >> $LOGDIR/mailMessage
	test_results=1
	echo "" >> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
	echo "The following is the 'tail' of the build failure">> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
        tail  -50 tmp >> $LOGDIR/mailMessage


        # If checkout did not fail, set test status to red, build failed
        if !(grep "blue" $LOGDIR/Test_Status)
        then
                echo "Test_results:red" > $LOGDIR/Test_Status
                echo "Set Test Status to red."
        fi
        


else

       	echo "Library build PASS with ESMF_BOPT=$OPT"
	echo "`date` library build .............................PASS" >> $LOGDIR/mailMessage

        # Check for warnings
        if grep -i "warning[ ]*:" tmp
        then
                echo "Builds with warnings." >> $LOGDIR/mailMessage
        fi



        gmake ESMF_BOPT=$OPT  install 1> tmp 2>&1
        if [ "$?" != "0" ]
        then
                echo "Library install FAILED with ESMF_BOPT=$OPT"
                install_results=1  # install failed

                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/install_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/install_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi #end of if [ $OPT != g ]

                echo "`date` library install ***************************FAIL" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "The following is the 'tail' of the install failure">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                tail  -50 tmp >> $LOGDIR/mailMessage

                else

                echo "Library install PASSED with ESMF_BOPT=$OPT"
                echo "`date` library install ...........................PASS" >> $LOGDIR/mailMessage

                gmake ESMF_BOPT=$OPT  installcheck 1> tmp 2>&1
                if [ "$?" != "0" ]
                then
                        echo "Library install check FAILED with ESMF_BOPT=$OPT"
                        install_results=1  # install failed

                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/installcheck_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/installcheck_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]

                        echo "`date` library installcheck **********************FAIL" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "The following is the 'tail' of the install failure">> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        tail  -50 tmp >> $LOGDIR/mailMessage
                	# Set test status as yellow, if it is not red
                	if !(grep "red" $LOGDIR/Test_Status)
                	then
                        	echo "Test_results:yellow" > $LOGDIR/Test_Status
                        	echo "Set Test Status to yellow."
                	fi



                        else

                        echo "Library installcheck PASSED with ESMF_BOPT=$OPT"
                        echo "`date` library installcheck ......................PASS" >> $LOGDIR/mailMessage


			export pass_num=0
                        export fail_num=0

			echo "" >> $LOGDIR/mailMessage
			echo "" >> $LOGDIR/mailMessage
			echo "|---------------------------------- NUOPC TESTS ----------------------------|" >> $LOGDIR/mailMessage


                        cd $ESMF_DIR/../NUOPC-Protos/SingleModelProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " SingleModelProto failed to build"
                                echo "`date` Build SingleModelProto ********************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the SingleModelProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " SingleModelProto built successfully"
                                echo "`date` Build SingleModelProto ....................PASS" >> $LOGDIR/mailMessage


                        fi


                        $homedir/exec_test 4 mainApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " SingleModelProto failed to run"
                                echo "`date` Run SingleModelProto **********************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the SingleModelProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " SingleModelProto ran"
                                echo "`date` Run SingleModelProto ......................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`
                        fi









                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnLndProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnLndProto failed to build"
                                echo "`date` Build AtmOcnLndProto **********************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnLndProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnLndProto built successfully"
                                echo "`date` Build AtmOcnLndProto ......................PASS" >> $LOGDIR/mailMessage


                        fi


			$homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnLndProto failed to run"
                                echo "`date` Run AtmOcnLndProto ************************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnLndProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then    
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi      
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."
                            
                        else    
                                echo " AtmOcnLndProto ran"
                                echo "`date` Run AtmOcnLndProto ........................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`
                        fi





                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnMedPetListProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnMedPetListProto failed to build"
                                echo "`date` Build AtmOcnMedPetListProto ***************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage                                
				echo "The following is the 'tail' of the AtmOcnMedPetListProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnMedPetListProto built successfully"
                                echo "`date` Build AtmOcnMedPetListProto ...............PASS" >> $LOGDIR/mailMessage


                        fi


                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnMedPetListProto failed to run"
                                echo "`date` Run AtmOcnMedPetListProto *****************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage                                
				echo "The following is the 'tail' of the AtmOcnMedPetListProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnMedPetListProto ran"
                                echo "`date` Run tmOcnMedPetListProto ..................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`
                        fi




                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnMedPetListTimescalesProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnMedPetListTimescalesProto failed to build"  
				echo "`date` Build AtmOcnMedPetListTimescalesProto *****FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage 
				echo "The following is the 'tail' of the AtmOcnMedPetListTimescalesProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnMedPetListTimescalesProto built successfully" 
				echo "`date` Build AtmOcnMedPetListTimescalesProto .....PASS" >> $LOGDIR/mailMessage

                        fi


                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnMedPetListTimescalesProto failed to run"                                
				echo "`date` Run AtmOcnMedPetListTimescalesProto *******FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage 	
				echo "The following is the 'tail' of the AtmOcnMedPetListTimescalesProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnMedPetListTimescalesProto ran"                                
				echo "`date` Run AtmOcnMedPetListTimescalesProto .......PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`
                        fi



        

                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnMedPetListTimescalesSplitFastProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnMedPetListTimescalesSplitFastProto failed to build"  
				echo "`date` Build AtmOcnMedPetListTimescalesSplitFastProto*FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage                                 
				echo "The following is the 'tail' of the AtmOcnMedPetListTimescalesSplitFastProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnMedPetListTimescalesSplitFastProto built successfully" 
                                echo "`date` Build AtmOcnMedPetListTimescalesSplitFastProto.PASS" >> $LOGDIR/mailMessage

                        fi


                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnMedPetListTimescalesSplitFastProto failed to run"                              
                                echo "`date` Run AtmOcnMedPetListTimescalesSplitFastProto*FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage                                  
				echo "The following is the 'tail' of the AtmOcnMedPetListTimescalesSplitFastProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnMedPetListTimescalesSplitFastProto ran" 
				echo "`date` Run AtmOcnMedPetListTimescalesSplitFastProto.PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`
                        fi




                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnProto failed to build"  
                                echo "`date` Build AtmOcnProto *************************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnProto built successfully" 
                                echo "`date` Build AtmOcnProto .........................PASS" >> $LOGDIR/mailMessage

                        fi


                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnProto failed to run"                                
                                echo "`date` Run AtmOcnProto ***************************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnProto ran"                                
                                echo "`date` Run AtmOcnProto ...........................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`
                        fi




        



                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnTransferGridProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnTransferGridProto failed to build"  
                                echo "`date` Build AtmOcnTransferGridProto *************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage  
				echo "The following is the 'tail' of the AtmOcnTransferGridProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnTransferGridProto built successfully" 
                                echo "`date` Build AtmOcnTransferGridProto .............PASS" >> $LOGDIR/mailMessage

                        fi


                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnProto failed to run"                                
                                echo "`date` Run AtmOcnProto ***************************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage 
				echo "The following is the 'tail' of the AtmOcnTransferGridProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnTransferGridProto ran"                                
                                echo "`date` Run AtmOcnTransferGridProto ...............PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`
                        fi


                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnTransferLocStreamProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnTransferLocStreamProto failed to build"  
                                echo "`date` Build AtmOcnTransferLocStreamProto ********FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnTransferLocStreamProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnTransferLocStreamProto built successfully" 
                                echo "`date` Build AtmOcnTransferLocStreamProto ........PASS" >> $LOGDIR/mailMessage

                        fi


                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnTransferLocStreamProto failed to run"                                
                                echo "`date` Run AtmOcnTransferLocStreamProto **********FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnTransferLocStreamProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnTransferLocStreamProto ran"                                
                                echo "`date` Run AtmOcnTransferLocStreamProto ..........PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`
                        fi





                        cd $ESMF_DIR/../NUOPC-Protos/NamespaceProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " NamespaceProto failed to build"   
				echo "`date` Build NamespaceProto **********************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage  	
				echo "The following is the 'tail' of the NamespaceProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " NamespaceProto built successfully"  
				echo "`date` Build NamespaceProto ......................PASS" >> $LOGDIR/mailMessage

                        fi


                        $homedir/exec_test 4 mainApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " NamespaceProto failed to run"                                
                                echo "`date` Run NamespaceProto ************************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage 
				echo "The following is the 'tail' of the NamespaceProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " NamespaceProto ran"                                
                                echo "`date` Run NamespaceProto ........................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`  

			fi




                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnCplListProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnCplListProto failed to build"   
                                echo "`date` Build AtmOcnCplListProto ******************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnCplListProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnCplListProto built successfully"  
                                echo "`date` Build AtmOcnCplListProto ..................PASS" >> $LOGDIR/mailMessage

                        fi


                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnCplListProto failed to run"                                
                                echo "`date` Run AtmOcnCplListProto ********************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnCplListProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnCplListProto ran"                                
                                echo "`date` Run AtmOcnCplListProto ....................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi





                        cd $ESMF_DIR/../NUOPC-Protos/DriverInDriverProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " DriverInDriverProto failed to build"   
                                echo "`date` Build DriverInDriverProto *****************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the DriverInDriverProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " DriverInDriverProto built successfully"  
                                echo "`date` Build DriverInDriverProto ..................PASS" >> $LOGDIR/mailMessage

                        fi


                        $homedir/exec_test 4 mainApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " DriverInDriverProto failed to run"                                
                                echo "`date` Run DriverInDriverProto *******************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the DriverInDriverProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " DriverInDriverProto ran"                                
                                echo "`date` Run DriverInDriverProto ...................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi





                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnRtmTwoTimescalesProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnRtmTwoTimescalesProto failed to build"   
                                echo "`date` Build AtmOcnRtmTwoTimescalesProto *********FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnRtmTwoTimescalesProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnRtmTwoTimescalesProto built successfully"  
                                echo "`date` Build AtmOcnRtmTwoTimescalesProto .........PASS" >> $LOGDIR/mailMessage

                        fi


                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnRtmTwoTimescalesProto failed to run"                                
                                echo "`date` Run AtmOcnRtmTwoTimescalesProto ***********FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnRtmTwoTimescalesProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnRtmTwoTimescalesProto ran"                                
                                echo "`date` Run AtmOcnRtmTwoTimescalesProto ...........PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi







                        cd $ESMF_DIR/../NUOPC-Protos/AsyncIOBlockingProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AsyncIOBlockingProto failed to build"   
                                echo "`date` Build AsyncIOBlockingProto ****************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AsyncIOBlockingProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AsyncIOBlockingProto built successfully"  
                                echo "`date` Build AsyncIOBlockingProto ................PASS" >> $LOGDIR/mailMessage

                        fi




                        $homedir/exec_test 4 asyncIOApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AsyncIOBlockingProto failed to run"                                
                                echo "`date` Run AsyncIOBlockingProto ******************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AsyncIOBlockingProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AsyncIOBlockingProto ran"                                
                                echo "`date` Run AsyncIOBlockingProto ..................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi




                        cd $ESMF_DIR/../NUOPC-Protos/AsyncIONonblockingProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AsyncIONonblockingProto failed to build"   
                                echo "`date` Build AsyncIONonblockingProto *************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AsyncIONonblockingProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AsyncIONonblockingProto built successfully"  
                                echo "`date` Build AsyncIONonblockingProto .............PASS" >> $LOGDIR/mailMessage

                        fi




                        $homedir/exec_test 4 asyncIOApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AsyncIONonblockingProto failed to run"                                
                                echo "`date` Run AsyncIONonblockingProto ***************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AsyncIONonblockingProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AsyncIONonblockingProto ran"                                
                                echo "`date` Run AsyncIONonblockingProto ...............PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnConProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnConProto failed to build"   
                                echo "`date` Build AtmOcnConProto **********************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnConProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnConProto built successfully"  
                                echo "`date` Build AtmOcnConProto ......................PASS" >> $LOGDIR/mailMessage

                        fi



                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnConProto failed to run"                                
                                echo "`date` Run AtmOcnConProto ************************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnConProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnConProto ran"                                
                                echo "`date` Run AtmOcnConProto ........................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi




                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnFDSynoProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnFDSynoProto failed to build"   
                                echo "`date` Build AtmOcnFDSynoProto *******************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnFDSynoProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnFDSynoProto built successfully"  
                                echo "`date` Build AtmOcnFDSynoProto ...................PASS" >> $LOGDIR/mailMessage

                        fi



                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnFDSynoProto failed to run"                                
                                echo "`date` Run AtmOcnFDSynoProto *********************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnFDSynoProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnFDSynoProto ran"                                
                                echo "`date` Run AtmOcnFDSynoProto .....................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi





                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnImplicitProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnImplicitProto failed to build"   
                                echo "`date` Build AtmOcnImplicitProto *****************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnImplicitProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnImplicitProto built successfully"  
                                echo "`date` Build AtmOcnImplicitProto .................PASS" >> $LOGDIR/mailMessage

                        fi




                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnImplicitProto failed to run"                                
                                echo "`date` Run AtmOcnImplicitProto *******************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnImplicitProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnImplicitProto ran"                                
                                echo "`date` Run AtmOcnImplicitProto ...................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi







                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnMedProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnMedProto failed to build"   
                                echo "`date` Build AtmOcnMedProto **********************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnMedProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnMedProto built successfully"  
                                echo "`date` Build AtmOcnMedProto ......................PASS" >> $LOGDIR/mailMessage

                        fi



                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnMedProto failed to run"                                
                                echo "`date` Run AtmOcnMedProto ************************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnMedProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnMedProto ran"                                
                                echo "`date` Run AtmOcnMedProto ........................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi






                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnPetListProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnPetListProto failed to build"   
                                echo "`date` Build AtmOcnPetListProto ******************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnPetListProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnPetListProto built successfully"  
                                echo "`date` Build AtmOcnPetListProto ..................PASS" >> $LOGDIR/mailMessage

                        fi



                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnPetListProto failed to run"                                
                                echo "`date` Run AtmOcnPetListProto ********************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnPetListProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnPetListProto ran"                                
                                echo "`date` Run AtmOcnPetListProto ....................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



			echo "" >> $LOGDIR/mailMessage
                        echo "|-------------------------------- ATM=A OCN=A,B,C --------------------------|" >> $LOGDIR/mailMessage
                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnSelectExternalProto
                        gmake distclean
                        ./cleanSubs.csh
                        ./buildSubs.csh
                        gmake  ATM=A OCN=A,B,C  1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSelectExternalProto failed to build"   
                                echo "`date` Build AtmOcnSelectExternalProto ***********FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectExternalProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSelectExternalProto built successfully"  
                                echo "`date` Build AtmOcnSelectExternalProto ...........PASS" >> $LOGDIR/mailMessage

                        fi
			echo "OCN_SELECT: A" > esm.config
                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSelectExternalProto failed to run"                                
                                echo "`date` Run AtmOcnSelectExternalProto *************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectExternalProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSelectExternalProto ran"                                
                                echo "`date` Run AtmOcnSelectExternalProto .............PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi





                        echo "" >> $LOGDIR/mailMessage
                        echo "|-------------------------------- ATM=B OCN=A,B,C --------------------------|" >> $LOGDIR/mailMessage
                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnSelectExternalProto
                        gmake distclean
                        ./cleanSubs.csh
                        ./buildSubs.csh
                        gmake  ATM=B OCN=A,B,C  1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSelectExternalProto failed to build"   
                                echo "`date` Build AtmOcnSelectExternalProto ***********FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectExternalProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSelectExternalProto built successfully"  
                                echo "`date` Build AtmOcnSelectExternalProto ...........PASS" >> $LOGDIR/mailMessage

                        fi
                        echo "OCN_SELECT: B" > esm.config
                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSelectExternalProto failed to run"                                
                                echo "`date` Run AtmOcnSelectExternalProto *************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectExternalProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSelectExternalProto ran"                                
                                echo "`date` Run AtmOcnSelectExternalProto .............PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi




                        echo "" >> $LOGDIR/mailMessage
                        echo "|-------------------------------- ATM=C OCN=A,B,C --------------------------|" >> $LOGDIR/mailMessage
                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnSelectExternalProto
                        gmake distclean
                        ./cleanSubs.csh
                        ./buildSubs.csh
                        gmake  ATM=C OCN=A,B,C  1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSelectExternalProto failed to build"   
                                echo "`date` Build AtmOcnSelectExternalProto ***********FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectExternalProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSelectExternalProto built successfully"  
                                echo "`date` Build AtmOcnSelectExternalProto ...........PASS" >> $LOGDIR/mailMessage

                        fi
                        echo "OCN_SELECT: C" > esm.config
                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSelectExternalProto failed to run"                                
                                echo "`date` Run AtmOcnSelectExternalProto *************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectExternalProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSelectExternalProto ran"                                
                                echo "`date` Run AtmOcnSelectExternalProto .............PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi





                        echo "" >> $LOGDIR/mailMessage
                        echo "|-------------------------------- ATM=D OCN=A,B,C --------------------------|" >> $LOGDIR/mailMessage
                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnSelectExternalProto
                        gmake distclean
                        ./cleanSubs.csh
                        ./buildSubs.csh
                        gmake  ATM=D OCN=A,B,C  1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSelectExternalProto failed to build"   
                                echo "`date` Build AtmOcnSelectExternalProto ***********FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectExternalProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSelectExternalProto built successfully"  
                                echo "`date` Build AtmOcnSelectExternalProto ...........PASS" >> $LOGDIR/mailMessage

                        fi
                        echo "OCN_SELECT: A" > esm.config
                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSelectExternalProto failed to run"                                
                                echo "`date` Run AtmOcnSelectExternalProto *************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectExternalProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSelectExternalProto ran"                                
                                echo "`date` Run AtmOcnSelectExternalProto .............PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi









                        echo "" >> $LOGDIR/mailMessage
                        echo "|-------------------------------- ATM=E OCN=A,B,C --------------------------|" >> $LOGDIR/mailMessage
                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnSelectExternalProto
                        gmake distclean
                        ./cleanSubs.csh
                        ./buildSubs.csh
                        gmake  ATM=E OCN=A,B,C  1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSelectExternalProto failed to build"   
                                echo "`date` Build AtmOcnSelectExternalProto ***********FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectExternalProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSelectExternalProto built successfully"  
                                echo "`date` Build AtmOcnSelectExternalProto ...........PASS" >> $LOGDIR/mailMessage

                        fi
                        echo "OCN_SELECT: B" > esm.config
                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSelectExternalProto failed to run"                                
                                echo "`date` Run AtmOcnSelectExternalProto *************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectExternalProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSelectExternalProto ran"                                
                                echo "`date` Run AtmOcnSelectExternalProto .............PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi




                        echo "" >> $LOGDIR/mailMessage
                        echo "|-------------------------------- ATM=A OCN=A,B ----------------------------|" >> $LOGDIR/mailMessage       
 
                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnSelectProto
                        gmake distclean
                        gmake ATM=A OCN=A,B  1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSelectProto failed to build"   
                                echo "`date` Build AtmOcnSelectProto *******************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSelectProto built successfully"  
                                echo "`date` Build AtmOcnSelectProto ...................PASS" >> $LOGDIR/mailMessage

                        fi



                        echo "OCN_SELECT: A" > esm.config
                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSelectProto failed to run"                                
                                echo "`date` Run AtmOcnSelectProto *********************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSelectProto ran"                                
                                echo "`date` Run AtmOcnSelectProto .....................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi





                        echo "" >> $LOGDIR/mailMessage
                        echo "|-------------------------------- ATM=B OCN=A,B ----------------------------|" >> $LOGDIR/mailMessage       
 
                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnSelectProto
                        gmake distclean
                        gmake ATM=B OCN=A,B  1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSelectProto failed to build"   
                                echo "`date` Build AtmOcnSelectProto *******************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSelectProto built successfully"  
                                echo "`date` Build AtmOcnSelectProto ...................PASS" >> $LOGDIR/mailMessage

                        fi



                        echo "OCN_SELECT: A" > esm.config
                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSelectProto failed to run"                                
                                echo "`date` Run AtmOcnSelectProto *********************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSelectProto ran"                                
                                echo "`date` Run AtmOcnSelectProto .....................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi








                        echo "" >> $LOGDIR/mailMessage
                        echo "|-------------------------------- ATM=A OCN=B ------------------------------|" >> $LOGDIR/mailMessage                      
                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnSelectProto
                        gmake distclean
                        gmake ATM=A OCN=B  1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSelectProto failed to build"   
                                echo "`date` Build AtmOcnSelectProto *******************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSelectProto built successfully"  
                                echo "`date` Build AtmOcnSelectProto ...................PASS" >> $LOGDIR/mailMessage

                        fi



			echo "OCN_SELECT: B" > esm.config
                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSelectProto failed to run"                                
                                echo "`date` Run AtmOcnSelectProto *********************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSelectProto ran"                                
                                echo "`date` Run AtmOcnSelectProto .....................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi





                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnSimpleImplicitProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSimpleImplicitProto failed to build"   
                                echo "`date` Build AtmOcnSimpleImplicitProto ***********FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSimpleImplicitProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSimpleImplicitProto built successfully"  
                                echo "`date` Build AtmOcnSimpleImplicitProto ...........PASS" >> $LOGDIR/mailMessage

                        fi




                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSimpleImplicitProto failed to run"                                
                                echo "`date` Run AtmOcnSimpleImplicitProto *************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSimpleImplicitProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSimpleImplicitProto ran"                                
                                echo "`date` Run AtmOcnSimpleImplicitProto .............PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi




                        cd $ESMF_DIR/../NUOPC-Protos/GenericMediatorProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " GenericMediatorProto failed to build"   
                                echo "`date` Build GenericMediatorProto ****************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the GenericMediatorProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " GenericMediatorProto built successfully"  
                                echo "`date` Build GenericMediatorProto ................PASS" >> $LOGDIR/mailMessage

                        fi




                        $homedir/exec_test 4 app  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " GenericMediatorProto failed to run"                                
                                echo "`date` Run GenericMediatorProto ******************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the GenericMediatorProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " GenericMediatorProto ran"                                
                                echo "`date` Run GenericMediatorProto ..................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi




                        cd $ESMF_DIR/../NUOPC-Protos/NestingMultipleProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " NestingMultipleProto failed to build"   
                                echo "`date` Build NestingMultipleProto ****************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the NestingMultipleProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " NestingMultipleProto built successfully"  
                                echo "`date` Build NestingMultipleProto ................PASS" >> $LOGDIR/mailMessage

                        fi




                        $homedir/exec_test 4 mainApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " NestingMultipleProto failed to run"                                
                                echo "`date` Run NestingMultipleProto ******************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the NestingMultipleProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " NestingMultipleProto ran"                                
                                echo "`date` Run NestingMultipleProto ..................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi






                        cd $ESMF_DIR/../NUOPC-Protos/NestingSingleProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " NestingSingleProto failed to build"   
                                echo "`date` Build NestingSingleProto ******************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the NestingSingleProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " NestingSingleProto built successfully"  
                                echo "`date` Build NestingSingleProto ..................PASS" >> $LOGDIR/mailMessage

                        fi





                        $homedir/exec_test 4 mainApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " NestingSingleProto failed to run"                                
                                echo "`date` Run NestingSingleProto ********************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the NestingSingleProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " NestingSingleProto ran"                                
                                echo "`date` Run NestingSingleProto ....................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi







                        cd $ESMF_DIR/../NUOPC-Protos/NestingTelescopeMultipleProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " NestingTelescopeMultipleProto failed to build"   
                                echo "`date` Build NestingTelescopeMultipleProto *******FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the NestingTelescopeMultipleProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " NestingTelescopeMultipleProto built successfully"  
                                echo "`date` Build NestingTelescopeMultipleProto .......PASS" >> $LOGDIR/mailMessage

                        fi




                        $homedir/exec_test 4 mainApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " NestingTelescopeMultipleProto failed to run"                                
                                echo "`date` Run NestingTelescopeMultipleProto *********FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the NestingTelescopeMultipleProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " NestingTelescopeMultipleProto ran"                                
                                echo "`date` Run NestingTelescopeMultipleProto .........PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi






                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnMedIngestFromConfigProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnMedIngestFromConfigProto failed to build"   
                                echo "`date` Build AtmOcnMedIngestFromConfigProto ******FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnMedIngestFromConfigProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnMedIngestFromConfigProto built successfully"  
                                echo "`date` Build AtmOcnMedIngestFromConfigProto ......PASS" >> $LOGDIR/mailMessage

                        fi




                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnMedIngestFromConfigProto failed to run"                                
                                echo "`date` Run AtmOcnMedIngestFromConfigProto ********FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnMedIngestFromConfigProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnMedIngestFromConfigProto ran"                                
                                echo "`date` Run AtmOcnMedIngestFromConfigProto .. .....PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi




                        cd $ESMF_DIR/../NUOPC-Protos/DriverInDriverProtoIPDv02
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " DriverInDriverProtoIPDv02 failed to build"   
                                echo "`date` Build DriverInDriverProtoIPDv02 ***********FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the DriverInDriverProtoIPDv02 build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " DriverInDriverProtoIPDv02 built successfully"  
                                echo "`date` Build DriverInDriverProtoIPDv02 ...........PASS" >> $LOGDIR/mailMessage

                        fi




                        $homedir/exec_test 4 mainApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " DriverInDriverProtoIPDv02 failed to run"                                
                                echo "`date` Run DriverInDriverProtoIPDv02 *************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the DriverInDriverProtoIPDv02 run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " DriverInDriverProtoIPDv02 ran"                                
                                echo "`date` Run DriverInDriverProtoIPDv02 .............PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnScalarProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnScalarProto failed to build"   
                                echo "`date` Build AtmOcnScalarProto *******************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnScalarProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnScalarProto built successfully"  
                                echo "`date` Build AtmOcnScalarProto ...................PASS" >> $LOGDIR/mailMessage

                        fi




                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnScalarProto failed to run"                                
                                echo "`date` Run AtmOcnScalarProto *********************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnScalarProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnScalarProto ran"                                
                                echo "`date` Run AtmOcnScalarProto .....................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $ESMF_DIR/../NUOPC-Protos/HierarchyProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " HierarchyProto failed to build"   
                                echo "`date` Build HierarchyProto **********************FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the HierarchyProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " HierarchyProto built successfully"  
                                echo "`date` Build HierarchyProto ......................PASS" >> $LOGDIR/mailMessage

                        fi




                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " HierarchyProto failed to run"                                
                                echo "`date` Run HierarchyProto ************************FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the HierarchyProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " HierarchyProto ran"                                
                                echo "`date` Run HierarchyProto ........................PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $ESMF_DIR/../NUOPC-Protos/AtmOcnMedIngestFromInternalProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnMedIngestFromInternalProto failed to build"   
                                echo "`date` Build AtmOcnMedIngestFromInternalProto*****FAIL" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnMedIngestFromInternalProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnMedIngestFromInternalProto built successfully"  
                                echo "`date` Build AtmOcnMedIngestFromInternalProto ....PASS" >> $LOGDIR/mailMessage

                        fi




                        $homedir/exec_test 4 esmApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnMedIngestFromInternalProto failed to run"                                
                                echo "`date` Run AtmOcnMedIngestFromInternalProto ******FAIL" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnMedIngestFromInternalProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnMedIngestFromInternalProto ran"                                
                                echo "`date` Run AtmOcnMedIngestFromInternalProto ......PASS" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi


















		fi


	fi


fi #end of if [ "$?" != "0" ] for gmake ESMF_BOPT=$OPT  1> tmp 2>&1

# Make name as short as possible
name=`uname -n | sed 's/\..*//'`


if [[ $test_results != 0 ]] 
then  #The build failed
	echo "**FAIL** $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI" >> $LOGDIR/summary
else
	if [[ $install_results != 0 ]]
        then  #The install failed
                echo "PASS FAIL $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI  $pass_num/$fail_num" >> $LOGDIR/summary
        else
                echo "PASS PASS $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI  $pass_num/$fail_num" >> $LOGDIR/summary
        fi
fi #end of if [$test_results != 0]



echo "" >> $LOGDIR/mailMessage


# keep expect happy
echo "test_esmf has finished"
BUILD-ESMF

############################# Run the tests on all computers ###############################

export First_Build=NOT_DONE
number=1
while grep "^$number " $rfile >tmp
do
	# Get the computer information
        read num location directory hostname abi site comp comm u_tests u_tests_type sys_test_type threaded mpmd ck_out_opt tag < tmp
        echo "$location $directory $hostname $abi $site $comp $comm $u_tests $u_tests_type $sys_test_type $threaded $mpmd $ck_out_opt $tag"
        cat tmp

	export ESMF_OS=`uname -s`
	export ESMF_DIR=$directory/esmf
	export LOGTMP=$log_tmp
	export OPT=g
	export ESMF_BOPT=g
	export SYS_TEST_TYPE=$sys_test_type
	export U_TESTS=$u_tests
	export U_TESTS_TYPE=$u_tests_type
	export ESMF_ABI=$abi
	export ESMF_SITE=$site
	export ESMF_COMPILER=$comp
	export ESMF_COMM=$comm
        export ESMF_INSTALL_PREFIX=$ESMF_DIR/../install_dir
	export ESMF_INSTALL_HEADERDIR=include
	export ESMF_INSTALL_LIBDIR=lib
	export ESMF_INSTALL_MODDIR=include
	export ESMF_INSTALL_BINDIR=bin
	export ESMFMKFILE=$ESMF_DIR/../install_dir/lib/esmf.mk
	export PATH=$PATH:$ESMF_DIR/../install_dir/bin
        export MP_MPILIB=mpich2
	module load netcdf/4.6.0
        export MPIRUN=mpiexec_mpt
	export ESMF_MPIRUN=mpirun
        export ESMF_NETCDF=split
	export ESMF_NETCDF_LIBPATH=/glade/u/apps/ch/opt/netcdf/4.6.0/intel/17.0.1/lib
	export ESMF_NETCDF_INCLUDE=/glade/u/apps/ch/opt/netcdf/4.6.0/intel/17.0.1/include
	
	module load pnetcdf/1.9.0
        export ESMF_PNETCDF=standard
	export ESMF_PNETCDF_LIBPATH=/glade/u/apps/ch/opt/pnetcdf/1.9.0/mpt/2.15f/intel/17.0.1/lib
	export ESMF_PNETCDF_INCLUDE=/glade/u/apps/ch/opt/pnetcdf/1.9.0/mpt/2.15f/intel/17.0.1/include
        export homedir=`pwd`
        if [[ $threaded = "THREADED" ]]
        then
                export ESMF_TESTWITHTHREADS=ON 
        else
                export ESMF_TESTWITHTHREADS=OFF
        fi 
        if [[ $u_tests = "EX" ]]
        then
                export ESMF_TESTEXHAUSTIVE=ON
        else 
                export ESMF_TESTEXHAUSTIVE=OFF
        fi 

        if [[ $mpmd = "MPMD" ]]
        then
                export ESMF_TESTMPMD=ON
        else
                export ESMF_TESTMPMD=OFF
        fi

        export RFile=$rfile
	echo "ESMF_DIR = $ESMF_DIR"
	cd $ESMF_DIR
	chmod 777 $homedir/test_esmf
        rm -rf $ESMF_INSTALL_PREFIX/*
	$homedir/test_esmf
	export OPT=O
	export ESMF_BOPT=O
	$homedir/test_esmf
	cd $homedir
        number=`expr $number + 1`
        echo "number = $number"
done
haltlam
cd $homedir
rm -f test_esmf
rm -f exp_co
rm -f tmp



echo "end of test script"
exit

