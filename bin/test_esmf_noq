#!/bin/bash -l
# $Id$

# This test script builds the ESMF libraries and runs the apps tests, system tests
# unit tests and examples. It also creates a test results report at $LOGDIR.
# This script can only be used on platforms that do not require requesting an execution queue.
# All ESMF variables must be set before calling this script.
# my_make should be defined as make for darwin, otherwise it should be defined as gmake.

cd $ESMF_DIR

env

#Clobber previous arch files
$my_make clobber 1> tmp 2>&1


echo "" >> $LOGDIR/mailMessage
echo "_______________________________________________________________________________________________" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage

test_results=0  #assume build passes
install_results=0  #assume install passes

echo "`date` on `uname -n` " >> $LOGDIR/mailMessage
# Get ESMF checkout source

read chkout_src <  ~/bin/esmf_chkout_src
#if read fails default:git://git.code.sf.net/p/esmf/esmf
if [ "$?" != "0" ]
then
        export chkout_src="https://github.com/esmf-org/esmf.git"
fi  
echo "" >> $LOGDIR/mailMessage
echo "ESMF Checkout Source: $chkout_src" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage

echo "Compiler and configuration information:" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage
echo "-------------------------------------------------------------- " >> $LOGDIR/mailMessage

module list  1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage
git remote -v 1> tmp 2>&1

if (grep -i "Not a git repository" tmp)
then
        #Checkout failed
        echo "Test_results:blue" > $LOGDIR/Test_Status
fi

echo "Repository:" >> $LOGDIR/mailMessage
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
git describe --tags 1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage


$my_make ESMF_BOPT=$OPT info 1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage



$my_make ESMF_BOPT=$OPT  1> tmp 2>&1
if [ "$?" != "0" ]
then
        echo "Library build FAIL with ESMF_BOPT=$OPT"

	if [ $OPT != g ]
	then 
		cat tmp > $LOGDIR/build_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
	else
		cat tmp > $LOGDIR/build_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
	fi #end of if [ $OPT != g ]

	echo "`date` library build ****************FAIL" >> $LOGDIR/mailMessage
	test_results=1
	echo "" >> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
	echo "The following is the 'tail' of the build failure">> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
        tail  -50 tmp >> $LOGDIR/mailMessage


        # If checkout did not fail, set test status to red, build failed
        if !(grep "blue" $LOGDIR/Test_Status)
        then
                echo "Test_results:red" > $LOGDIR/Test_Status
                echo "Set Test Status to red."
        fi
	

else

       	echo "Library build PASS with ESMF_BOPT=$OPT"
	echo "`date` library build ................PASS" >> $LOGDIR/mailMessage

        # Check for warnings
        if ( grep -i "warning[ ]*:" tmp )
        then
                echo "Builds with warnings." >> $LOGDIR/mailMessage
        fi

	# check if all files should be logged
	if [[ $LOGTMP = "ALL" ]]
	then
        	if [ $OPT != g ]
        	then 
                	cat tmp > $LOGDIR/build_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
        	else    
                	cat tmp > $LOGDIR/build_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
        	fi #end of if [ $OPT != g ]
	fi # end of if [[ $LOGTMP = "ALL" ]]


        $my_make ESMF_BOPT=$OPT  install 1> tmp 2>&1
        if [ "$?" != "0" ]
        then
                echo "Library install FAILED with ESMF_BOPT=$OPT"
                install_results=1  # install failed

                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/install_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/install_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi #end of if [ $OPT != g ]

                echo "`date` library install **************FAIL" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "The following is the 'tail' of the install failure">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                tail  -50 tmp >> $LOGDIR/mailMessage

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status) 
		then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                fi


                else

                echo "Library install PASSED with ESMF_BOPT=$OPT"
                echo "`date` library install ..............PASS" >> $LOGDIR/mailMessage

                $my_make ESMF_BOPT=$OPT  installcheck 1> tmp 2>&1
                if [ "$?" != "0" ]
                then
                        echo "Library install check FAILED with ESMF_BOPT=$OPT"
                        install_results=1  # install failed

                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/installcheck_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/installcheck_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]

                        echo "`date` library installcheck *********FAIL" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "The following is the 'tail' of the install failure">> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        tail  -50 tmp >> $LOGDIR/mailMessage
                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status) 
			then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                        fi


                else

                        echo "Library install PASSED with ESMF_BOPT=$OPT"
                        echo "`date` library installcheck .........PASS" >> $LOGDIR/mailMessage

                fi

                $my_make ESMF_BOPT=$OPT  build_quick_start 1> tmp 2>&1
                if [ "$?" != "0" ]
                then
                        echo "Quick start build check FAILED with ESMF_BOPT=$OPT"
                        quickstart_results=1  # install failed

                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/quickstart_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/quickstart_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]

                        echo "`date` quickstart build *************FAIL" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "The following is the 'tail' of the quickstart build  failure">> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        tail  -50 tmp >> $LOGDIR/mailMessage
			# Set test status as yellow, if it is not red
			if !(grep "red" $LOGDIR/Test_Status) 
			then
				echo "Test_results:yellow" > $LOGDIR/Test_Status
			fi
                else

                        echo "Quickstart build passed with ESMF_BOPT=$OPT"
                        echo "`date` quickstart build .............PASS" >> $LOGDIR/mailMessage
                        quickstart_results=0  # quick_start passed

                fi


        fi



	echo "" >> $LOGDIR/mailMessage
	echo "|------------------------ APPs TESTS --------------------------|" >> $LOGDIR/mailMessage

	export apps_pass=0
	export apps_fail=0

        $my_make ESMF_BOPT=$OPT  build_apps 1> tmp 2>&1
        if [ "$?" != "0" ]
        then
                echo "build apps FAILED with ESMF_BOPT=$OPT"
                install_results=1  # build apps failed

                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/buils_apps_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/buils_apps_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi #end of if [ $OPT != g ]
                echo "`date` apps build *******************FAIL" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "The following is the 'tail' of the build_apps failure">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                tail  -50 tmp >> $LOGDIR/mailMessage
                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi
		# Save results for summary
                echo "PASS $apps_pass FAIL $apps_fail" > $LOGDIR/apps_results


	else

                echo "build apps PASSED with ESMF_BOPT=$OPT"
                echo "`date` apps build ...................PASS" >> $LOGDIR/mailMessage
	fi

		apps_pass=0
		apps_fail=0

		cd $ESMF_DIR/apps/apps$ESMF_BOPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/

	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage

                if [ $ESMF_COMM != mpiuni ]
                then
                        mpirun -np 4 ./ESMF_Regrid --help 1> ESMF_Regrid.stdout  2>&1
                else
                        ./ESMF_Regrid --help 1> ESMF_Regrid.stdout  2>&1
                fi

		if [ "$?" != "0" ]
        	then
			echo "ESMF_Regrid FAILED with ESMF_BOPT=$OPT"
                	echo "`date` ESMF_Regrid --help ***********FAIL" >> $LOGDIR/mailMessage

                	# Set test status as yellow, if it is not red
                	if !(grep "red" $LOGDIR/Test_Status)
                	then
                        	echo "Test_results:yellow" > $LOGDIR/Test_Status
                        	echo "Set Test Status to yellow."
                	fi
                	# Update number of test failures
			apps_fail=`expr $apps_fail + 1`
                	read failures < $LOGDIR/Test_Failures
                	total=`expr $failures + 1`
                	echo "$total" > $LOGDIR/Test_Failures
                	echo "New failure total is $total."


                else

                	echo "ESMF_Regrid PASSED with ESMF_BOPT=$OPT"
                	echo "`date` ESMF_Regrid --help ...........PASS" >> $LOGDIR/mailMessage
			apps_pass=`expr $apps_pass + 1`
		fi

		echo "The following is the output of ESMF_Regrid --help">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                cat ESMF_Regrid.stdout >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage

	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage

                if [ $ESMF_COMM != mpiuni ]
                then
                        mpirun -np 4 ./ESMF_Regrid --version 1> ESMF_Regrid.stdout  2>&1
                else
                        ./ESMF_Regrid --version 1> ESMF_Regrid.stdout  2>&1
                fi

                if [ "$?" != "0" ]
                then
                        echo "ESMF_Regrid FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_Regrid --version ********FAIL" >> $LOGDIR/mailMessage

                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_Regrid PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_Regrid --version ........PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi

                echo "The following is the output of ESMF_Regrid --version">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                cat ESMF_Regrid.stdout >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage


	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage
                if [ $ESMF_COMM != mpiuni ]
                then
                        mpirun -np 4 ./ESMF_Regrid -V 1> ESMF_Regrid.stdout  2>&1
                else
                        ./ESMF_Regrid -V 1> ESMF_Regrid.stdout  2>&1
                fi

                if [ "$?" != "0" ]
                then
                        echo "ESMF_Regrid FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_Regrid -V ***************FAIL" >> $LOGDIR/mailMessage

                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_Regrid PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_Regrid -V ...............PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi

                echo "The following is the output of ESMF_Regrid -V">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                cat ESMF_Regrid.stdout >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage


	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage

                if [ $ESMF_COMM != mpiuni ]
                then
                        mpirun -np 4 ./ESMF_Info --help  1> ESMF_Info.stdout  2>&1
                else
                        ./ESMF_Info --help  1> ESMF_Info.stdout  2>&1
                fi

                if [ "$?" != "0" ]
                then
                        echo "ESMF_Info FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_Info --help *************FAIL" >> $LOGDIR/mailMessage

                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_Info PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_Info --help .............PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi

                echo "The following is the output of ESMF_Info --help ">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                cat  ESMF_Info.stdout >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage

	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage

                if [ $ESMF_COMM != mpiuni ]
                then
                        mpirun -np 4 ./ESMF_Info --version  1> ESMF_Info.stdout  2>&1
                else
                        ./ESMF_Info --version  1> ESMF_Info.stdout  2>&1
                fi

                if [ "$?" != "0" ]
                then
                        echo "ESMF_Info FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_Info --version **********FAIL" >> $LOGDIR/mailMessage

                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_Info PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_Info --version ..........PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi

                echo "The following is the output of ESMF_Info --version ">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                cat  ESMF_Info.stdout >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage



	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage
                if [ $ESMF_COMM != mpiuni ]
                then
                        mpirun -np 4 ./ESMF_Info -V  1> ESMF_Info.stdout  2>&1
                else
                        ./ESMF_Info -V  1> ESMF_Info.stdout  2>&1
                fi

                if [ "$?" != "0" ]
                then
                        echo "ESMF_Info FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_Info -V *****************FAIL" >> $LOGDIR/mailMessage

                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_Info PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_Info -V .................PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi

                echo "The following is the output of ESMF_Info -V ">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                cat  ESMF_Info.stdout >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage

	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage
                if [ $ESMF_COMM != mpiuni ]
                then
                        mpirun -np 4 ./ESMF_InfoC --help  1> ESMF_InfoC.stdout  2>&1
                else
                        ./ESMF_InfoC --help  1> ESMF_InfoC.stdout  2>&1
                fi

                if [ "$?" != "0" ]
                then
                        echo "ESMF_InfoC FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_InfoC --help ************FAIL" >> $LOGDIR/mailMessage

                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_InfoC PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_InfoC --help ............PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi

                echo "The following is the output of ESMF_InfoC --help">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                cat  ESMF_InfoC.stdout >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage


	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage
                if [ $ESMF_COMM != mpiuni ]
                then
                        mpirun -np 4 ./ESMF_InfoC --version  1> ESMF_InfoC.stdout  2>&1
                else
                        ./ESMF_InfoC --version  1> ESMF_InfoC.stdout  2>&1
                fi

                if [ "$?" != "0" ]
                then
                        echo "ESMF_InfoC FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_InfoC --version *********FAIL" >> $LOGDIR/mailMessage

                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_InfoC PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_InfoC --version .........PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi

                echo "The following is the output of ESMF_InfoC --version">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                cat  ESMF_InfoC.stdout >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage



	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage
                if [ $ESMF_COMM != mpiuni ]
                then
                        mpirun -np 4 ./ESMF_InfoC -V  1> ESMF_InfoC.stdout  2>&1
                else
                        ./ESMF_InfoC -V  1> ESMF_InfoC.stdout  2>&1
                fi

                if [ "$?" != "0" ]
                then 
                        echo "ESMF_InfoC FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_InfoC -V ****************FAIL" >> $LOGDIR/mailMessage
                        
                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then 
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures 
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_InfoC PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_InfoC -V ................PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi

                echo "The following is the output of ESMF_InfoC -V">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                cat  ESMF_InfoC.stdout >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage



	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage

                if [ $ESMF_COMM != mpiuni ]
                then
                        mpirun -np 4 ./ESMF_RegridWeightGen --help  1> ESMF_RegridWeightGen.stdout  2>&1
                else
                        ./ESMF_RegridWeightGen --help  1> ESMF_RegridWeightGen.stdout  2>&1
                fi

                if [ "$?" != "0" ]
                then
                        echo "ESMF_RegridWeightGen FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_RegridWeightGen --help **FAIL" >> $LOGDIR/mailMessage

                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_RegridWeightGen PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_RegridWeightGen --help ..PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi

                        echo "The following is the output of ESMF_RegridWeightGen --help">> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        cat ESMF_RegridWeightGen.stdout >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage



	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage

                if [ $ESMF_COMM != mpiuni ]
                then
                        mpirun -np 4 ./ESMF_RegridWeightGen --version  1> ESMF_RegridWeightGen.stdout  2>&1
                else
                        ./ESMF_RegridWeightGen --version  1> ESMF_RegridWeightGen.stdout  2>&1
                fi

                if [ "$?" != "0" ]
                then
                        echo "ESMF_RegridWeightGen FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_RegridWeightGen --version FAIL" >> $LOGDIR/mailMessage

                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_RegridWeightGen PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_RegridWeightGen --version PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi

                        echo "The following is the output of ESMF_RegridWeightGen --version">> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        cat ESMF_RegridWeightGen.stdout >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage




	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage

                if [ $ESMF_COMM != mpiuni ]
                then
                        mpirun -np 4 ./ESMF_RegridWeightGen -V  1> ESMF_RegridWeightGen.stdout  2>&1
                else
                        ./ESMF_RegridWeightGen -V  1> ESMF_RegridWeightGen.stdout  2>&1
                fi

                if [ "$?" != "0" ]
                then
                        echo "ESMF_RegridWeightGen FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_RegridWeightGen -V ******FAIL" >> $LOGDIR/mailMessage

                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_RegridWeightGen PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_RegridWeightGen -V ......PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi

                        echo "The following is the output of ESMF_RegridWeightGen -V">> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        cat ESMF_RegridWeightGen.stdout >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage




	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage

                if [ $ESMF_COMM != mpiuni ]
                then
                        mpirun -np 4 ./ESMF_Scrip2Unstruct --help  1> ESMF_Scrip2Unstruct.stdout  2>&1
                else
                        ./ESMF_Scrip2Unstruct --help  1> ESMF_Scrip2Unstruct.stdout  2>&1
                fi

                if [ "$?" != "0" ]
                then
                        echo "ESMF_Scrip2Unstruct FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_Scrip2Unstruct --help ***FAIL" >> $LOGDIR/mailMessage

                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_Scrip2Unstruct PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_Scrip2Unstruct --help ...PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi

                echo "The following is the output of ESMF_Scrip2Unstruct --help">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                cat ESMF_Scrip2Unstruct.stdout >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage




	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage

                if [ $ESMF_COMM != mpiuni ]
                then
                        mpirun -np 4 ./ESMF_Scrip2Unstruct --version  1> ESMF_Scrip2Unstruct.stdout  2>&1
                else
                        ./ESMF_Scrip2Unstruct --version  1> ESMF_Scrip2Unstruct.stdout  2>&1
                fi

                if [ "$?" != "0" ]
                then
                        echo "ESMF_Scrip2Unstruct FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_Scrip2Unstruct --version FAIL" >> $LOGDIR/mailMessage

                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_Scrip2Unstruct PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_Scrip2Unstruct --version PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi

                echo "The following is the output of ESMF_Scrip2Unstruct --version">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                cat ESMF_Scrip2Unstruct.stdout >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                        


	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage

                if [ $ESMF_COMM != mpiuni ]
                then
                        mpirun -np 4 ./ESMF_Scrip2Unstruct -V  1> ESMF_Scrip2Unstruct.stdout  2>&1
                else
                        ./ESMF_Scrip2Unstruct -V  1> ESMF_Scrip2Unstruct.stdout  2>&1
                fi

                if [ "$?" != "0" ]
                then
                        echo "ESMF_Scrip2Unstruct FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_Scrip2Unstruct -V *******FAIL" >> $LOGDIR/mailMessage

                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_Scrip2Unstruct PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_Scrip2Unstruct -V .......PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi      

                echo "The following is the output of ESMF_Scrip2Unstruct -V">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                cat ESMF_Scrip2Unstruct.stdout >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage


	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage

                ./ESMF_WebServController --help  1> ESMF_WebServController.stdout  2>&1
                if [ "$?" != "0" ]
                then
                        echo "ESMF_WebServController FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_WebServController --help FAIL" >> $LOGDIR/mailMessage

                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_WebServController PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_WebServController --help PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi

                echo "The following is the output of ESMF_WebServController --help">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                cat  ESMF_WebServController.stdout >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage


	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage

                ./ESMF_WebServController --version  1> ESMF_WebServController.stdout  2>&1
                if [ "$?" != "0" ]
                then 
                        echo "ESMF_WebServController FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_WebServController --version FAIL" >> $LOGDIR/mailMessage

                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_WebServController PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_WebServController --version PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi

                echo "The following is the output of ESMF_WebServController --version">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                cat  ESMF_WebServController.stdout >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage



	echo "" >> $LOGDIR/mailMessage
	echo "|--------------------------------------------------------------|" >> $LOGDIR/mailMessage

                ./ESMF_WebServController -V  1> ESMF_WebServController.stdout  2>&1
                if [ "$?" != "0" ]
                then 
                        echo "ESMF_WebServController FAILED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_WebServController -V ****FAIL" >> $LOGDIR/mailMessage

                        # Set test status as yellow, if it is not red
                        if !(grep "red" $LOGDIR/Test_Status)
                        then
                                echo "Test_results:yellow" > $LOGDIR/Test_Status
                                echo "Set Test Status to yellow."
                        fi
                        # Update number of test failures
                        apps_fail=`expr $apps_fail + 1`
                        read failures < $LOGDIR/Test_Failures
                        total=`expr $failures + 1`
                        echo "$total" > $LOGDIR/Test_Failures
                        echo "New failure total is $total."


                else

                        echo "ESMF_WebServController PASSED with ESMF_BOPT=$OPT"
                        echo "`date` ESMF_WebServController -V ....PASS" >> $LOGDIR/mailMessage
                        apps_pass=`expr $apps_pass + 1`
                fi

                echo "The following is the output of ESMF_WebServController -V">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                cat  ESMF_WebServController.stdout >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage





		apps_total=`expr $apps_fail + $apps_pass`
		echo "" >> $LOGDIR/mailMessage
		echo "" >> $LOGDIR/mailMessage
		echo "Ran $apps_total applications tests, $apps_pass passed and $apps_fail failed." >> $LOGDIR/mailMessage

		tar -cf app$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar *.stdout
        	gzip app$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar
        	mv -f app$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar.gz $LOGDIR/.




	cd $ESMF_DIR


	echo "" >> $LOGDIR/mailMessage
	echo "|----------------------- SYSTEM TESTS -------------------------|" >> $LOGDIR/mailMessage


        
        $my_make  ESMF_BOPT=$OPT build_system_tests 1> tmp 2>&1
        if [ "$?" != "0" ]
        then
                echo "system_tests build FAIL "
                echo "`date` build_system_tests ***********FAIL" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "The following is the 'tail' of the system tests failure">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                tail  -50 tmp >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage

                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi # end of if [ $OPT != g ]
                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status) 
		then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                fi


        else
                echo "build_system_tests PASS "
                echo "`date` build_system_tests ...........PASS" >> $LOGDIR/mailMessage

                if [[ $LOGTMP = "ALL" ]]
                then
                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]
                fi # end of if [[ $LOGTMP = "ALL" ]]

        fi #end of if [ "$?" != "0" ] for $my_make ESMF_BOPT=$OPT build_system_tests 1> tmp 2>&1

        

        if [[ $SYS_TEST_TYPE = "UNI" ]]
        then
                $my_make ESMF_BOPT=$OPT run_system_tests_uni 1> tmp 2>&1
        else
                $my_make ESMF_BOPT=$OPT run_system_tests 1> tmp 2>&1
        fi #end of if [[ $SYS_TEST_TYPE = "UNI" ]]

        if [ "$?" != "0" ]
        then
                if [[ $SYS_TEST_TYPE = "UNI" ]]
                then
                        echo "run_system_tests_uni FAIL "
                        echo "`date` run_system_tests_uni *********FAIL" >> $LOGDIR/mailMessage

                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_system_tests_uni$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_system_tests_uni$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi # end of if [ $OPT != g ]
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "The following is the 'tail' of the run_system_tests_uni failure">> $LOGDIR/mailMessage
                else
                        echo "run_system_tests FAIL "
                        echo "`date` run_system_tests *************FAIL" >> $LOGDIR/mailMessage

                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi # end of if [ $OPT != g ]
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "The following is the 'tail' of the run_system_tests failure">> $LOGDIR/mailMessage
                fi #end of if [[ $SYS_TEST_TYPE = "UNI" ]]

                echo "" >> $LOGDIR/mailMessage
                tail  -50 tmp >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status) 
		then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                fi

        else
                if [[ $SYS_TEST_TYPE = "UNI" ]]
                then
                        echo "run_system_tests_uni PASS "
                        echo "`date` run_system_tests_uni .........PASS" >> $LOGDIR/mailMessage
                else
                        echo "run_system_tests PASS "
                        echo "`date` run_system_tests .............PASS" >> $LOGDIR/mailMessage
                fi #end of if [[ $SYS_TEST_TYPE = "UNI" ]]
        fi #end of if [ "$?" != "0" ] for $my_make ESMF_BOPT=$OPT run_system_tests 1> tmp 2>&1

        if [[ $LOGTMP = "ALL" ]]
        then
                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_system_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi #end of if [ $OPT != g ]
         fi # end of if [[ $LOGTMP = "ALL" ]]

	$my_make check_system_tests >> $LOGDIR/mailMessage
	read pass sysTestPass fail sysTestFail < $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/system_tests_results

        if [[ $sysTestFail != 0 ]]
        then
                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi
		# Update number of test failures
		read failures < $LOGDIR/Test_Failures
		total=`expr $failures + $sysTestFail`
		echo "$total" > $LOGDIR/Test_Failures
		echo "New failure total is $total."
        fi




        #make tarballs of test directories
        mkdir test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*stdout test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*Log test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        tar -cf test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        gzip test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar
        mv -f test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar.gz $LOGDIR/.
        rm -rf test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM


	echo "" >> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
	echo "|------------------------- EXAMPLES ---------------------------|" >> $LOGDIR/mailMessage



        $my_make  ESMF_BOPT=$OPT build_examples 1> tmp 2>&1
        if [ "$?" != "0" ]
        then
                echo "examples build FAIL "
                echo "`date` build_examples build *********FAIL" >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	echo "The following is the 'tail' of the examples failure">> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	tail  -50 tmp >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage

                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi # end of if [ $OPT != g ]

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status) 
		then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                fi


        else
                echo "build_examples PASS "
                echo "`date` build_examples ...............PASS" >> $LOGDIR/mailMessage

                if [[ $LOGTMP = "ALL" ]]
                then
                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]
                fi # end of if [[ $LOGTMP = "ALL" ]]

        fi #end of if [ "$?" != "0" ] for $my_make ESMF_BOPT=$OPT build_examples 1> tmp 2>&1



	if [[ $SYS_TEST_TYPE = "UNI" ]]
	then
		$my_make ESMF_BOPT=$OPT run_examples_uni 1> tmp 2>&1
	else
		$my_make ESMF_BOPT=$OPT run_examples 1> tmp 2>&1
	fi #end of if [[ $SYS_TEST_TYPE = "UNI" ]]
		
        if [ "$?" != "0" ]
        then
		if [[ $SYS_TEST_TYPE = "UNI" ]]
		then
                	echo "run_examples_uni FAIL "
                	echo "`date` run_examples_uni *************FAIL" >> $LOGDIR/mailMessage

                	if [ $OPT != g ]
                	then
                        	cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_examples_uni$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                	else
                        	cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_examples_uni$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                	fi # end of if [ $OPT != g ]
        		echo "" >> $LOGDIR/mailMessage
        		echo "" >> $LOGDIR/mailMessage
        		echo "The following is the 'tail' of the run_examples_uni failure">> $LOGDIR/mailMessage
		else
                	echo "run_examples FAIL "
                	echo "`date` run_examples *****************FAIL" >> $LOGDIR/mailMessage

                	if [ $OPT != g ]
                	then
                        	cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                	else
                        	cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                	fi # end of if [ $OPT != g ]
        		echo "" >> $LOGDIR/mailMessage
        		echo "" >> $LOGDIR/mailMessage
        		echo "The following is the 'tail' of the run_examples failure">> $LOGDIR/mailMessage
		fi #end of if [[ $SYS_TEST_TYPE = "UNI" ]]

        	echo "" >> $LOGDIR/mailMessage
        	tail  -50 tmp >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status) 
		then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                fi



        else
		if [[ $SYS_TEST_TYPE = "UNI" ]]
		then
                	echo "run_examples_uni PASS "
                	echo "`date` run_examples_uni .............PASS" >> $LOGDIR/mailMessage
		else
                	echo "run_examples PASS "
                	echo "`date` run_examples .................PASS" >> $LOGDIR/mailMessage
		fi #end of if [[ $SYS_TEST_TYPE = "UNI" ]]
        fi #end of if [ "$?" != "0" ] for $my_make ESMF_BOPT=$OPT run_examples 1> tmp 2>&1

        if [[ $LOGTMP = "ALL" ]]
        then
        	if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_examples_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi #end of if [ $OPT != g ]
         fi # end of if [[ $LOGTMP = "ALL" ]]

	$my_make check_examples >> $LOGDIR/mailMessage
	read pass ex_passed fail ex_failed < $ESMF_DIR/examples/examples$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/examples_results

        if [[ $ex_failed != 0 ]]
        then
                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi
		# Update number of test failures
                read failures < $LOGDIR/Test_Failures
		total=`expr $failures + $ex_failed`
                echo "$total" > $LOGDIR/Test_Failures
		echo "New failure total is $total."

        fi

        # Make tarball of the examples Log and stdout files
        mkdir examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/examples/examples$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*stdout examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/examples/examples$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*Log examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/examples/examples$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*xml examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/examples/examples$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*xsd examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        tar -cf examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        gzip examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar
        mv -f examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar.gz $LOGDIR/.
        rm -rf examples$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM



	echo "" >> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage


	if [[ $U_TESTS = "NON" ]]
	then
		echo "|-------------------NON_EXHAUSTIVE UNIT TESTS -----------------|" >> $LOGDIR/mailMessage
	else
		echo "|-------------------- EXHAUSTIVE UNIT TESTS -------------------|" >> $LOGDIR/mailMessage
	fi # end of if [[ $U_TESTS = "NON" ]]
	$my_make  build_unit_tests 1> tmp 2>&1
	if [ "$?" != "0" ]
        then
        	echo "build_unit_tests FAIL "
		echo "`date` build_unit_tests *************FAIL" >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage
        	echo "The following is the 'tail' of the build_unit_tests failure">> $LOGDIR/mailMessage

        	echo "" >> $LOGDIR/mailMessage
        	tail  -50 tmp >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage

		if [ $OPT != g ]
		then
			cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
		else
			cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
		fi # end of if [ $OPT != g ]


                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status) 
		then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                fi


	else
		echo "build_unit_tests PASS "
		echo "`date` build_unit_tests .............PASS" >> $LOGDIR/mailMessage

                if [[ $LOGTMP = "ALL" ]]
                then
                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/build_O_`date +%d``uname -n`build_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/build_g_`date +%d``uname -n`build_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]
                fi # end of if [[ $LOGTMP = "ALL" ]]

	fi #end of if [ "$?" != "0" ] for $my_make ESMF_BOPT=$OPT  build_unit_tests 1> tmp 2>&1



        if [[ $U_TESTS_TYPE = "UNI" ]]
        then
                $my_make run_unit_tests_uni 1> tmp 2>&1
        else
                $my_make run_unit_tests 1> tmp 2>&1

        fi # end of if [[ $U_TESTS_TYPE = "UNI" ]]



	if [ "$?" != "0" ]
       	then
		if [[ $U_TESTS_TYPE = "UNI" ]]
		then
       			echo "run_unit_tests_uni FAIL "
			echo "`date` run_unit_tests_uni ***********FAIL" >> $LOGDIR/mailMessage
        		echo "" >> $LOGDIR/mailMessage
        		echo "" >> $LOGDIR/mailMessage
        		echo "The following is the 'tail' of the run_unit_tests_uni failure">> $LOGDIR/mailMessage
		else
       			echo "run_unit_tests FAIL "
			echo "`date` run_unit_tests ***************FAIL" >> $LOGDIR/mailMessage
        		echo "" >> $LOGDIR/mailMessage
        		echo "" >> $LOGDIR/mailMessage
        		echo "The following is the 'tail' of the run_unit_tests failure">> $LOGDIR/mailMessage
		fi # end of if [[ $U_TESTS_TYPE = "UNI" ]]

        	echo "" >> $LOGDIR/mailMessage
        	tail  -50 tmp >> $LOGDIR/mailMessage
        	echo "" >> $LOGDIR/mailMessage


		if [ $OPT != g ]
		then
			cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
		else
			cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
		fi # end of if [ $OPT != g ]

                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status) 
		then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                fi


	else
		if [[ $U_TESTS_TYPE = "UNI" ]]
		then
       			echo "run_unit_tests_uni PASS "
			echo "`date` run_unit_tests_uni ...........PASS" >> $LOGDIR/mailMessage
		else
       			echo "run_test PASS "
			echo "`date` run_unit_tests ...............PASS" >> $LOGDIR/mailMessage
		fi # end of if [[ $U_TESTS_TYPE = "UNI" ]]
		if [[ $LOGTMP = "ALL" ]]
                then
                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/build_O_`date +%d``uname -n`run_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/build_g_`date +%d``uname -n`run_unit_tests_$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]
                fi # end of if [[ $LOGTMP = "ALL" ]]


	fi #end of if [ "$?" != "0" ] for $my_make ESMF_BOPT=$OPT  run_unit_tests_uni 1> tmp 2>&1

	echo "" >> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
                
        $my_make check_unit_tests >> $LOGDIR/mailMessage
        read pass test_pass fail test_fail< $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/unit_tests_results 
                
        if [[ $test_fail != 0 ]]
        then
                # Set test status as yellow, if it is not red
                if !(grep "red" $LOGDIR/Test_Status)
                then
                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                        echo "Set Test Status to yellow."
                fi
		# Update number of test failures
                read failures < $LOGDIR/Test_Failures
		total=`expr $failures + $test_fail`
                echo "$total" > $LOGDIR/Test_Failures
		echo "New failure total is $total."

        fi


        #make tarballs of test directories
        mkdir test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*stdout test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*Log test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*xml test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/*xsd test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        cp $ESMF_DIR/test/test$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/test_harness* test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        tar -cf test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM
        gzip test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar
        mv -f test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.tar.gz $LOGDIR/.
        rm -rf test$OPT.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM



fi #end of if [ "$?" != "0" ] for $my_make ESMF_BOPT=$OPT  1> tmp 2>&1

# Make name as short as possible
name=`uname -n | sed 's/\..*//'`


if [[ $test_results != 0 ]] 
then  #The build failed
	echo "**FAIL** $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI" >> $LOGDIR/summary
else
        if [[ $install_results != 0 || $quickstart_results != 0 ]] 
        then  #The install failed
                echo "PASS FAIL $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI $test_pass/$test_fail $ex_passed/$ex_failed $sysTestPass/$sysTestFail $apps_pass/$apps_fail" >> $LOGDIR/summary
        else
                echo "PASS PASS $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI $test_pass/$test_fail $ex_passed/$ex_failed $sysTestPass/$sysTestFail $apps_pass/$apps_fail" >> $LOGDIR/summary
        fi
fi #end of if [$test_results != 0]

echo "" >> $LOGDIR/mailMessage


# keep expect happy
echo "test_esmf has finished"
